name: Deploy Package

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deploy Target'
        required: true
        type: choice
        options:
          - production-pypi
          - test-pypi

jobs:
  list-artifacts:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
    - name: Get available artifacts
      id: set-matrix
      uses: actions/github-script@v6
      with:
        script: |
          const response = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const artifacts = response.data.artifacts
            .filter(artifact =>
              artifact.name === 'production-release' ||
              artifact.name === 'beta-release'
            )
            .map(artifact => ({
              name: artifact.name,
              id: artifact.id,
              created_at: artifact.created_at,
              size: Math.round(artifact.size_in_bytes / 1024) + ' KB'
            }));

          console.log('Available artifacts:');
          artifacts.forEach(a => {
            console.log(`${a.name} (${a.size}) - Created: ${a.created_at}`);
          });

          core.setOutput('matrix', JSON.stringify(artifacts));

  deploy:
    needs: list-artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact: ${{fromJson(needs.list-artifacts.outputs.matrix)}}

    steps:
    - name: Download artifact
      uses: actions/github-script@v6
      with:
        script: |
          const download = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: ${{ matrix.artifact.id }},
            archive_format: 'zip',
          });

          const fs = require('fs');
          fs.writeFileSync('${{github.workspace}}/artifact.zip', Buffer.from(download.data));

    - name: Extract artifact
      run: |
        unzip artifact.zip -d dist/
        rm artifact.zip

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Load cached dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-deploy-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-deploy-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Validate deployment combination
      run: |
        if [[ "${{ inputs.deploy_target }}" == "production-pypi" && "${{ matrix.artifact.name }}" != "production-release" ]]; then
          echo "‚ùå Error: Cannot deploy beta release to production PyPI"
          exit 1
        fi

    - name: Deploy to PyPI
      if: inputs.deploy_target == 'production-pypi'
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        TWINE_REPOSITORY: pypi
      run: |
        echo "üì¶ Deploying ${{ matrix.artifact.name }} to PyPI..."
        twine upload dist/*

    - name: Deploy to TestPyPI
      if: inputs.deploy_target == 'test-pypi'
      env:
        TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
        TWINE_REPOSITORY: testpypi
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: |
        echo "üì¶ Deploying ${{ matrix.artifact.name }} to TestPyPI..."
        twine upload dist/*

    - name: Deployment Status
      run: |
        echo "‚úÖ Deployment Summary:"
        echo "- Artifact: ${{ matrix.artifact.name }} (${{ matrix.artifact.size }})"
        echo "- Created: ${{ matrix.artifact.created_at }}"
        if [ "${{ inputs.deploy_target }}" = "production-pypi" ]; then
          echo "- Target: PyPI"
          echo "- View at: https://pypi.org/project/venv-py/"
        else
          echo "- Target: TestPyPI"
          echo "- View at: https://test.pypi.org/project/venv-py/"
        fi
